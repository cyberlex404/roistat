<?php

/**
 * @file
 * Contains roistat.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_theme().
 */
function roistat_theme() {
  $themes = [];
  $themes['webform_handler_roistat_summary'] = [
    'variables' => ['settings' => NULL, 'handler' => NULL],
  ];
  return $themes;
}

/**
 * Implements hook_token_info().
 */
function roistat_token_info() {

  $roistat_type = [
    'name' => t('Roistat'),
    'description' => t('Roistat token.'),
  ];
  $roistat_tokens['visit'] = [
    'name' => t('Cookie roistat_visit'),
    'description' => t('Cookie roistat_visit.'),
  ];
  return [
    'types' => ['roistat' => $roistat_type],
    'tokens' => ['roistat' => $roistat_tokens],
  ];
}

/**
 * Implements hook_tokens().
 */
function roistat_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'roistat') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'visit' :
          $request = \Drupal::request();
          $value = $request->cookies->has('roistat_visit') ? $request->cookies->getInt('roistat_visit') : 0;
          $replacements[$original] = $value;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_page_bottom().
 */
function roistat_page_bottom(array &$page_bottom) {
  $counter_code = \Drupal::config('roistat.settings')->get('counter_code');

  if (
    !empty($counter_code) &&
    _roistat_show_counter() &&
    _roistat_show_counter_for_role()
  ) {
    $page_bottom['roistat_counter_code'] = [
      '#type' => 'inline_template',
      '#template' => '<div class="roistat-counter-code">{{ counter_code|raw }}</div>',
      '#context' => [
        'counter_code' => $counter_code
      ],
    ];
  }
}

/**
 * Helper function
 * Returns FALSE if we need to disable counter on page.
 *
 * @return bool
 */
function _roistat_show_counter() {
  $pages = \Drupal::config('roistat.settings')->get('visibility.path.pages');
  $visibility = \Drupal::config('roistat.settings')->get('visibility.path.visibility');

  $urls_equal = FALSE;
  if (!empty($pages)) {

    $pages_in_lowcase = mb_strtolower($pages);

    $current_path = \Drupal::service('path.alias_manager')->getAliasByPath(\Drupal::service('path.current')->getPath());

    $current_path = mb_strtolower($current_path);

    // In D8 alias is with leading slash?
    // @todo: Make sure we follow D8 standards of aliases.
    $current_path = ltrim($current_path, "/");

    // Compare internal and path alias.
    $path_match = \Drupal::service('path.matcher')->matchPath($current_path, $pages_in_lowcase);

    if ($path_match) {

      $urls_equal = TRUE;
    }
    else {
      // If path alias doesn't equal with current_path() then compare internal and current_path().
      $path_match = \Drupal::service('path.matcher')->matchPath(\Drupal::service('path.current')->getPath(), $pages_in_lowcase);
      if (($current_path != \Drupal::service('path.current')->getPath()) && $path_match) {

        $urls_equal = TRUE;
      }
    }
  }

  if (!$visibility && $urls_equal) {
    return FALSE;
  }
  elseif (!$visibility && !$urls_equal) {
    return TRUE;
  }
  elseif ($visibility && $urls_equal) {
    return TRUE;
  }
  elseif ($visibility && !$urls_equal) {
    return FALSE;
  }
}

/**
 * Helper function
 *
 * @return bool
 */
function _roistat_show_counter_for_role() {
  $user = \Drupal::currentUser();

  $visibility = (bool) \Drupal::config('roistat.settings')->get('visibility.role.visibility');
  $enabled = (bool) $visibility;
  $roles = \Drupal::config('roistat.settings')->get('visibility.role.roles');

  $has_active_role = FALSE;
  foreach ($roles as $key => $value) {
    if($key === $value) {
      $has_active_role = TRUE;
      break;
    }
  }

  if ($has_active_role) {
    // One or more roles are selected.
    foreach ($user->getRoles() as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid === $roles[$rid]) {
        // Current user is a member of a role that should be tracked/excluded from tracking.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}


